#----------2019.11.29-----------#
一次构建，一次封装，到处运行

Docker:解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。

Docker client -> Docker daemon(调用REST API(over UNIX sockets or network interface));daemon管理

Q1：与虚拟机的不同
  虚拟机：带环境安装的解决方案。可以在一个操作系统中运行另外的一个操作系统。笨重，虚拟出一套硬件后在此基础上运行。
    缺点：资源占用高，启动慢
    
  Docker：进程隔离，以容器为单位，容器中存有软件运行所需的所有库资源与设置。
    优点：直接运行在操作系统内核上，不需要模拟和虚拟硬件；每个容器有自己的文件系统，进程间不会相互隔离，能够区分计算资源。
    
Q2：Docker三要素：镜像，容器，仓库
  镜像是模板，容器是实例。类似于java中的对象与实例。

  镜像：是一个只读的模板，镜像可以用来创建容器，一个镜像可以创建多个容器。
  
  容器：是用镜像创建的运行实例，利用容器独立运行的一个或一组应用。每个容器是相互隔离的，可以被看作是简易版的Linux。
  
  仓库：集中存放镜像的地方。
  
#---------------------------#
常用命令：
docker version: 查看docker版本
docker info: 详细描述
docker --help: 帮助菜单

docker images: 列出本地镜像 / -a 显示所有镜像 -q 显示镜像ID -qa显示所有镜像ID
docker search: 在docker hub上查找某个镜像名字 /-s 点赞数筛选 -automated 只列出自动构建
docker pull: 根据名称从远程仓库拉某个镜像/ :+版本标签
docker rmi: 删除某个镜像/ -f:强制删除 (删除多个的话，中间用空格分隔)

docker run [options] image [command][arg] 新建并启动容器
  options : --name = "容器新名字";-d 后台运行容器，并返回容器id(启动守护式容器);-i 以交互模式运行容器，通常与-t同时使用;-p 为容器重新分配一个伪输入终端，通常与-i同时使用
            -P 随即端口映射;-P 指定端口映射
  Dokcer容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令，就会自动退出。
  
docker ps: 列出正在运行的所有容器/ -a 正在运行的以及历史上运行过的 -I:显示最近创建的容器 -n:显示最近n个创建的容器 -q:只显示容器编号
退出docker：输入exit/ctrl+d 退出容器且关闭, docker ps 查看无/ctrl+p+q 退出容器但不关闭, docker ps 查看有
docker stop: 停止运行中的docker容器 /容器名或者容器参数
docker start: 启动容器 /容器名或者容器参数(启动一个或多个已经停止的容器)
docker restart: 重启容器 /容器名或者容器参数(重启容器，不论之前是否启动或停止)
docker kill: 强制关闭停止运行中的docker容器 /容器名或者容器参数
docker rm: 删除已经停止的容器 /容器名或者容器参数 -f $(docker ps -aq)(批量删除)

