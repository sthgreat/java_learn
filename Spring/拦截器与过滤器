Spring的Interceptor(拦截器)与Servlet的Filter有相似之处，比如二者都是AOP编程思想的体现，都能实现权限检查、日志记录等。不同的是：

Filter
1.  Filter 接口定义在 javax.servlet 包中
2.  Filter 定义在 web.xml 中	 	 
3.  Filter在只在 Servlet 前后起作用。Filters通常将请求和响应（request/response） 当做黑盒子，Filter 通常不考虑servlet 的实现。
4.  Filter 是 Servlet 规范规定的。
5.  Filter 是在 Servlet 规范中定义的，是 Servlet 容器支持的。
6.  Filter 不能够使用 Spring 容器资源
7.  Filter 是被 Server(like Tomcat) 调用

Interceptor
1.  接口 HandlerInterceptor 定义在org.springframework.web.servlet 包中	 
2.
3.  拦截器能够深入到方法前后、异常抛出前后等，因此拦截器的使用具有更大的弹性。允许用户介入（hook into）请求的生命周期，在请求过程中获取信息，Interceptor 通常和请求更加耦合。
4.  而拦截器既可以用于Web程序，也可以用于Application、Swing程序中。
5.  而拦截器是在 Spring容器内的，是Spring框架支持的。
6.  拦截器是一个Spring的组件，归Spring管理，配置在Spring文件中，因此能使用Spring里的任何资源、对象，例如 Service对象、数据源、事务管理等，通过IoC注入到拦截器即可
7.  Interceptor 是被 Spring 调用

Summary


3.  在Spring构架的程序中，要优先使用拦截器。几乎所有 Filter 能够做的事情， interceptor 都能够轻松的实现
4.  使用范围不同
5.  规范不同
6.  Spring 中使用 interceptor 更容易
7.  因此 Filter 总是优先于Interceptor执行

#---------------------------------------------#
拦截器（Interceptor）和过滤器（Filter）的执行顺序
过滤前-拦截前-Action处理-拦截后-过滤后
#---------------------------------------------#
Request Filters 可以:

执行安全检查 perform security checks
格式化请求头和主体 reformat request headers or bodies
审查或者记录日志 audit or log requests
根据请求内容授权或者限制用户访问 Authentication-Blocking requests based on user identity.
根据请求频率限制用户访问
Response Filters 可以:

压缩响应内容,比如让下载的内容更小 Compress the response stream
追加或者修改响应 append or alter the response stream
创建或者整体修改响应 create a different response altogether
根据地方不同修改响应内容 Localization-Targeting the request and response to a particular locale.
#---------------------------------------------#

 总结
1.过滤器：所谓过滤器顾名思义是用来过滤的，在java web中，你传入的request,response提前过滤掉一些信息，或者提前设置一些参数，然后再传入servlet或者struts的action进行业务逻辑，比如过滤掉非法url（不是login.do的地址请求，如果用户没有登陆都过滤掉）,或者在传入servlet或者struts的action前统一设置字符集，或者去除掉一些非法字符（聊天室经常用到的，一些骂人的话）。filter 流程是线性的， url传来之后，检查之后，可保持原来的流程继续向下执行，被下一个filter, servlet接收等.

2.java的拦截器 主要是用在插件上，扩展件上比如 hibernate spring struts2等 有点类似面向切片的技术，在用之前先要在配置文件即xml文件里声明一段的那个东西。
