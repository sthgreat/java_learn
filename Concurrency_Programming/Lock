Lock的使用方式：
  Lock lock = new ReentrantLock();
  lock.lock();
  try{
    ...
  }finally{
    lock.unlock();
  }
  
  1.在finally块中释放锁，保证锁最后能被释放。
  2.不将获取锁写在try中。因为在获取锁时发生异常，异常抛出的同时，锁会被无故释放。
  特性： A.可以尝试非阻塞地获取锁
        B.能被中断地获取锁


  reentrantlock的公平锁与非公平锁：区别在于，公平锁在获取锁的过程中需要观察当前节点（等待线程构造而成的节点）是否有前驱节点。而非公平锁不需要这一判断。


  AQS队列同步器：AQS提供了一种实现阻塞锁和一系列依赖FIFO等待队列的同步器的框架，完成线程同步。以队列同步器为基础实现的锁，在某一线程通过CAS操作获得
  同步状态时，在上层表现出来的即为获得了锁。
