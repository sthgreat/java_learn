索引的作用：索引其实是一种数据结构，能够帮助我们快速的检索数据库中的数据

种类：
  1. 哈希索引
    优点： a. 等值查询具有绝对优势
    缺点： a. 无法进行范围查询（包括模糊查询）
          b. 无法使用索引排序
          c. 大量重复键值的情况下，哈希索引的效率会很低，因为存在哈希碰撞问题
          
  
  2. b+树索引
    非叶子节点只存储
    优点： a. 相较于b树，内部节点只存储导航信息，不存储实际内容，因此整个树更加扁平，同样大小的磁盘页存储的数据更多
          b. 所有检索均需要走一条从根节点到叶子节点的路，因此查询性能平衡
          c. 所有的叶子节点是一个有序链表，适合范围查找（包括模糊查询）（也适合根据索引排序）
         
    聚簇索引(主键索引)，非聚簇索引（非主键索引）：Innodb存储引擎中，简而言之就是聚簇索引的B+Tree的叶子节点上的data就是数据本身，非聚簇索引就是指B+Tree的叶子节点上的data，
    并不是数据本身，而是数据存放的地址。
    
    非聚集索引在覆盖索引中不需要查询多次。

覆盖索引（covering index）指一个查询语句的执行只用从索引中就能够取得，不必从数据表中读取。也可以称之为实现了索引覆盖。

当一条查询语句符合覆盖索引条件时，MySQL只需要通过索引就可以返回查询所需要的数据，这样避免了查到索引后再返回表操作，减少I/O提高效率。

如，表covering_index_sample中有一个普通索引 idx_key1_key2(key1,key2)。

当我们通过SQL语句：select key2 from covering_index_sample where key1 = 'keytest';的时候，就可以通过覆盖索引查询，无需回表。

面试题：
  Q：那么，聚簇索引和非聚簇索引，在查询数据的时候有区别吗？

  A：聚簇索引查询会更快？

  Q：为什么呢？ 

  A：因为主键索引树的叶子节点直接就是我们要查询的整行数据了。而非主键索引的叶子节点是主键的值，查到主键的值以后，还需要再通过主键的值再进行一次查询

===========================================
  联合索引：对多个字段同时建立的索引(有顺序，ABC，ACB是完全不同的两种联合索引。)
  最左前缀匹配：在创建多列索引时，我们根据业务需求，where子句中使用最频繁的一列放在最左边，因为MySQL索引查询会遵循最左前缀匹配的原则，
  即最左优先，在检索数据时从联合索引的最左边开始匹配。所以当我们创建一个联合索引的时候，如(key1,key2,key3)，相当于
  创建了（key1）、(key1,key2)和(key1,key2,key3)三个索引，这就是最左匹配原则
  把最常用的，筛选数据最多的字段放在左侧。
